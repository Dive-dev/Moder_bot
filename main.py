import logging 
import sqlite3
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message

from config import TOKEN
from config import ADMIN
from messages import MESSAGES
import keyboards as kb
from keyboards import kbs
from keyboards import krg
from filter_admin import IsAdminFilter

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)
banned_users = set()

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
conn = sqlite3.connect('db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(user_id INTEGER, block INTEGER);""")
conn.commit()

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
db = sqlite3.connect('server.db')
sql = db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS pols(
    login TEXT,
    password TEXT
)""")

db.commit()


class dialog(StatesGroup):
    spam = State()
    blacklist = State()
    whitelist = State()


dp.filters_factory.bind(IsAdminFilter)

dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['start'])
async def start(message: Message):
    curs = conn.cursor()
    curs.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
    result = curs.fetchone()
    if message.from_user.id == ADMIN:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å White prince', reply_markup=kbs)
    else:
        if result is None:
            text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.full_name}üëã\n"
            await message.answer(text=text)
            await message.reply(MESSAGES['start'], reply_markup=kb.grt_kb2, reply=False)
            curs = conn.cursor()
            curs.execute(f'''SELECT * FROM users WHERE (user_id="{message.from_user.id}")''')
            entry = curs.fetchone()
            if entry is None:
                curs.execute(f'''INSERT INTO users VALUES ('{message.from_user.id}', '0')''')
                conn.commit()
            else:
                await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!')
 

@dp.message_handler(commands=['help'])
# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å
async def process_help_command(message: types.Message):
    await message.reply(MESSAGES['help'], reply=False)


@dp.message_handler(commands="sys")
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç
async def reg_command(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=krg)


@dp.message_handler(commands=['fm'])
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã—Å—Ç—Ä–æ –≤—ã–¥–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
async def process_fm_command(message: types.Message):
    await message.answer('–§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ—Ä–∞–∑', reply_markup=kb.markup3)


@dp.message_handler(content_types=['text'], text='–†–∞—Å—Å—ã–ª–∫–∞')
async def spam(message: Message):
    if message.from_user.id == ADMIN:
        await dialog.spam.set()
        await message.answer('–ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å?')


@dp.message_handler(state=dialog.spam)  # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def start_spam(message: Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kbs)
        await state.finish()
    else:
        curs = conn.cursor()
        curs.execute(f'''SELECT user_id FROM users''')
        spam_base = curs.fetchall()
        for z in range(len(spam_base)):
            await bot.send_message(spam_base[z][0], message.text)
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=kbs)
            await state.finish()


@dp.message_handler(content_types=['text'], text='–î–æ–±–∞–≤–∏—Ç—å –≤ Blacklist')
async def handler(message: types.Message, state: FSMContext):
    if message.chat.id == ADMIN:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n'
                             '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=keyboard)
        await dialog.blacklist.set()


@dp.message_handler(state=dialog.blacklist)
async def proces(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kbs)
        await state.finish()
    else:
        if message.text.isdigit():
            curs = conn.cursor()
            curs.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
            result = curs.fetchall()
            if len(result) == 0:
                await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=kbs)
                await state.finish()
            else:
                a = result[0]
                idt = a[0]
                if idt == 0:
                    curs.execute(f"UPDATE users SET block = 1 WHERE user_id = {message.text}")
                    conn.commit()
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°.', reply_markup=kbs)
                    await state.finish()
                    await bot.send_message(message.text, '–¢—ã –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π')
                else:
                    await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–∞–Ω', reply_markup=kbs)
                    await state.finish()
        else:
            await message.answer('–¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã...\n\n–í–≤–µ–¥–∏ ID')


@dp.message_handler(content_types=['text'], text='–£–±—Ä–∞—Ç—å –∏–∑ Blacklist')
async def hfandler(message: types.Message, state: FSMContext):
    curs = conn.cursor()
    curs.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
    result = curs.fetchone()
    if result is None:
        if message.chat.id == ADMIN:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
            await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n'
                                 '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=keyboard)
            await dialog.whitelist.set()


@dp.message_handler(state=dialog.whitelist)
async def proc(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kbs)
        await state.finish()
    else:
        if message.text.isdigit():
            curs = conn.cursor()
            curs.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
            result = curs.fetchall()
            conn.commit()
            if len(result) == 0:
                await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=kbs)
                await state.finish()
            else:
                a = result[0]
                idt = a[0]
                if idt == 1:
                    curs = conn.cursor()
                    curs.execute(f"UPDATE users SET block = 0 WHERE user_id = {message.text}")
                    conn.commit()
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.', reply_markup=kbs)
                    await state.finish()
                    await bot.send_message(message.text, '–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.')
                else:
                    await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–ª –±–∞–Ω.', reply_markup=kbs)
                    await state.finish()
        else:
            await message.answer('–í—ã –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç\n–í–≤–µ–¥–∏ ID')


@dp.message_handler(content_types=['text'], text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±–æ—Ç–∞
async def handler(message: types.Message, state: FSMContext):
    curs = conn.cursor()
    curs.execute('''select * from users''')
    results = curs.fetchall()
    await message.answer(f'–õ—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞ –ª–∏–±–æ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ –±–æ—Ç–∞: {len(results)}')


@dp.message_handler(content_types=['text'], text='Sing up')
async def sing_up(message: types.Message, state: FSMContext):
    await message.answer('–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: –û—Ç–º–µ–Ω–∞')
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=krg)
        await state.finish()
    if message.text != '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ Login: ')
        time.sleep(15)
        sql.execute(f"SELECT login FROM pols WHERE login = '{message.text}'")
        await message.answer('–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
    else:
        sql.execute(f"SELECT login FROM pols WHERE login = '{message.text}'")
        login = message.text
        password = 0000
        sql.execute(f"INSERT INTO pols VALUES (?, ?)", (login, password))
        db.commit()
        await message.answer('–ì–æ—Ç–æ–≤–æ')
        if password == 0000:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ Password: ')
            time.sleep(15)
            password = message.text
            sql.execute(f"SELECT login FROM pols WHERE password = '{message.text}'")
            sql.execute(f"INSERT INTO pols VALUES (?, ?)", (login, password))
            db.commit()
            await message.answer('–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã')


@dp.message_handler(content_types=['text'], text='Log in')
async def log_in(message: types.Message, state: FSMContext):
    await message.answer('–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: –û—Ç–º–µ–Ω–∞')
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=krg)
        await state.finish()
    elif message.text != '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –õ–æ–≥–∏–Ω')
        time.sleep(15)
        sql.execute(f"SELECT login FROM pols WHERE login = '{message.text}'")
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        sql.execute(f"SELECT password FROM pols WHERE password = '{message.text}'")
        time.sleep(15)
        await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@dp.message_handler(commands=["boom"])  # –í–∑—Ä—ã–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def boom(message: types.Message):
    time.sleep(3)
    await message.delete()

    
@dp.message_handler()  # –§–∏–ª—å—Ç–æ—Ä –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤–∞
async def filter_msg(message: types.Message):
    if message.text in MESSAGES['badwords']:
        await message.delete()


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()

# –ø–æ–ª–∏–Ω–≥
if __name__ == '__main__':
    executor.start_polling(dp, on_shutdown=shutdown)
